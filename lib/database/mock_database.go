// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/database/database.go
//
// Generated by this command:
//
//	mockgen -source=./lib/database/database.go -destination=./lib/database/mock_database.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	entity "github.com/Neniel/gotennis/lib/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockDatabase) AddCategory(arg0 context.Context, arg1 *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", arg0, arg1)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockDatabaseMockRecorder) AddCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockDatabase)(nil).AddCategory), arg0, arg1)
}

// AddPlayer mocks base method.
func (m *MockDatabase) AddPlayer(arg0 context.Context, arg1 *entity.Player) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockDatabaseMockRecorder) AddPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockDatabase)(nil).AddPlayer), arg0, arg1)
}

// AddTenant mocks base method.
func (m *MockDatabase) AddTenant(arg0 context.Context, arg1 *entity.Tenant) (*entity.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTenant", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTenant indicates an expected call of AddTenant.
func (mr *MockDatabaseMockRecorder) AddTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTenant", reflect.TypeOf((*MockDatabase)(nil).AddTenant), arg0, arg1)
}

// AddTournament mocks base method.
func (m *MockDatabase) AddTournament(arg0 context.Context, arg1 *entity.Tournament) (*entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTournament", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTournament indicates an expected call of AddTournament.
func (mr *MockDatabaseMockRecorder) AddTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTournament", reflect.TypeOf((*MockDatabase)(nil).AddTournament), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockDatabase) DeleteCategory(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockDatabaseMockRecorder) DeleteCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockDatabase)(nil).DeleteCategory), arg0, arg1)
}

// DeletePlayer mocks base method.
func (m *MockDatabase) DeletePlayer(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockDatabaseMockRecorder) DeletePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockDatabase)(nil).DeletePlayer), arg0, arg1)
}

// DeleteTenant mocks base method.
func (m *MockDatabase) DeleteTenant(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTenant indicates an expected call of DeleteTenant.
func (mr *MockDatabaseMockRecorder) DeleteTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenant", reflect.TypeOf((*MockDatabase)(nil).DeleteTenant), arg0, arg1)
}

// DeleteTournament mocks base method.
func (m *MockDatabase) DeleteTournament(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTournament", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTournament indicates an expected call of DeleteTournament.
func (mr *MockDatabaseMockRecorder) DeleteTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTournament", reflect.TypeOf((*MockDatabase)(nil).DeleteTournament), arg0, arg1)
}

// GetCategories mocks base method.
func (m *MockDatabase) GetCategories(arg0 context.Context) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockDatabaseMockRecorder) GetCategories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockDatabase)(nil).GetCategories), arg0)
}

// GetCategory mocks base method.
func (m *MockDatabase) GetCategory(arg0 context.Context, arg1 string) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockDatabaseMockRecorder) GetCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockDatabase)(nil).GetCategory), arg0, arg1)
}

// GetPlayer mocks base method.
func (m *MockDatabase) GetPlayer(arg0 context.Context, arg1 string) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockDatabaseMockRecorder) GetPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockDatabase)(nil).GetPlayer), arg0, arg1)
}

// GetPlayers mocks base method.
func (m *MockDatabase) GetPlayers(arg0 context.Context) ([]entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", arg0)
	ret0, _ := ret[0].([]entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayers indicates an expected call of GetPlayers.
func (mr *MockDatabaseMockRecorder) GetPlayers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockDatabase)(nil).GetPlayers), arg0)
}

// GetTenant mocks base method.
func (m *MockDatabase) GetTenant(arg0 context.Context, arg1 string) (*entity.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockDatabaseMockRecorder) GetTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockDatabase)(nil).GetTenant), arg0, arg1)
}

// GetTenants mocks base method.
func (m *MockDatabase) GetTenants(arg0 context.Context) ([]entity.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenants", arg0)
	ret0, _ := ret[0].([]entity.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenants indicates an expected call of GetTenants.
func (mr *MockDatabaseMockRecorder) GetTenants(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenants", reflect.TypeOf((*MockDatabase)(nil).GetTenants), arg0)
}

// GetTournament mocks base method.
func (m *MockDatabase) GetTournament(arg0 context.Context, arg1 string) (*entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTournament", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTournament indicates an expected call of GetTournament.
func (mr *MockDatabaseMockRecorder) GetTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTournament", reflect.TypeOf((*MockDatabase)(nil).GetTournament), arg0, arg1)
}

// GetTournaments mocks base method.
func (m *MockDatabase) GetTournaments(arg0 context.Context) ([]entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTournaments", arg0)
	ret0, _ := ret[0].([]entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTournaments indicates an expected call of GetTournaments.
func (mr *MockDatabaseMockRecorder) GetTournaments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTournaments", reflect.TypeOf((*MockDatabase)(nil).GetTournaments), arg0)
}

// IsAvailable mocks base method.
func (m *MockDatabase) IsAvailable(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockDatabaseMockRecorder) IsAvailable(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockDatabase)(nil).IsAvailable), arg0, arg1, arg2)
}

// UpdateCategory mocks base method.
func (m *MockDatabase) UpdateCategory(arg0 context.Context, arg1 *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockDatabaseMockRecorder) UpdateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockDatabase)(nil).UpdateCategory), arg0, arg1)
}

// UpdatePlayer mocks base method.
func (m *MockDatabase) UpdatePlayer(arg0 context.Context, arg1 *entity.Player) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockDatabaseMockRecorder) UpdatePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockDatabase)(nil).UpdatePlayer), arg0, arg1)
}

// UpdateTournament mocks base method.
func (m *MockDatabase) UpdateTournament(arg0 context.Context, arg1 *entity.Tournament) (*entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTournament", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTournament indicates an expected call of UpdateTournament.
func (mr *MockDatabaseMockRecorder) UpdateTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTournament", reflect.TypeOf((*MockDatabase)(nil).UpdateTournament), arg0, arg1)
}

// MockDBReader is a mock of DBReader interface.
type MockDBReader struct {
	ctrl     *gomock.Controller
	recorder *MockDBReaderMockRecorder
}

// MockDBReaderMockRecorder is the mock recorder for MockDBReader.
type MockDBReaderMockRecorder struct {
	mock *MockDBReader
}

// NewMockDBReader creates a new mock instance.
func NewMockDBReader(ctrl *gomock.Controller) *MockDBReader {
	mock := &MockDBReader{ctrl: ctrl}
	mock.recorder = &MockDBReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBReader) EXPECT() *MockDBReaderMockRecorder {
	return m.recorder
}

// GetCategories mocks base method.
func (m *MockDBReader) GetCategories(arg0 context.Context) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockDBReaderMockRecorder) GetCategories(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockDBReader)(nil).GetCategories), arg0)
}

// GetCategory mocks base method.
func (m *MockDBReader) GetCategory(arg0 context.Context, arg1 string) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockDBReaderMockRecorder) GetCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockDBReader)(nil).GetCategory), arg0, arg1)
}

// GetPlayer mocks base method.
func (m *MockDBReader) GetPlayer(arg0 context.Context, arg1 string) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockDBReaderMockRecorder) GetPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockDBReader)(nil).GetPlayer), arg0, arg1)
}

// GetPlayers mocks base method.
func (m *MockDBReader) GetPlayers(arg0 context.Context) ([]entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayers", arg0)
	ret0, _ := ret[0].([]entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayers indicates an expected call of GetPlayers.
func (mr *MockDBReaderMockRecorder) GetPlayers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayers", reflect.TypeOf((*MockDBReader)(nil).GetPlayers), arg0)
}

// GetTenant mocks base method.
func (m *MockDBReader) GetTenant(arg0 context.Context, arg1 string) (*entity.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockDBReaderMockRecorder) GetTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockDBReader)(nil).GetTenant), arg0, arg1)
}

// GetTenants mocks base method.
func (m *MockDBReader) GetTenants(arg0 context.Context) ([]entity.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenants", arg0)
	ret0, _ := ret[0].([]entity.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenants indicates an expected call of GetTenants.
func (mr *MockDBReaderMockRecorder) GetTenants(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenants", reflect.TypeOf((*MockDBReader)(nil).GetTenants), arg0)
}

// GetTournament mocks base method.
func (m *MockDBReader) GetTournament(arg0 context.Context, arg1 string) (*entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTournament", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTournament indicates an expected call of GetTournament.
func (mr *MockDBReaderMockRecorder) GetTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTournament", reflect.TypeOf((*MockDBReader)(nil).GetTournament), arg0, arg1)
}

// GetTournaments mocks base method.
func (m *MockDBReader) GetTournaments(arg0 context.Context) ([]entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTournaments", arg0)
	ret0, _ := ret[0].([]entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTournaments indicates an expected call of GetTournaments.
func (mr *MockDBReaderMockRecorder) GetTournaments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTournaments", reflect.TypeOf((*MockDBReader)(nil).GetTournaments), arg0)
}

// IsAvailable mocks base method.
func (m *MockDBReader) IsAvailable(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockDBReaderMockRecorder) IsAvailable(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockDBReader)(nil).IsAvailable), arg0, arg1, arg2)
}

// MockDBWriter is a mock of DBWriter interface.
type MockDBWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDBWriterMockRecorder
}

// MockDBWriterMockRecorder is the mock recorder for MockDBWriter.
type MockDBWriterMockRecorder struct {
	mock *MockDBWriter
}

// NewMockDBWriter creates a new mock instance.
func NewMockDBWriter(ctrl *gomock.Controller) *MockDBWriter {
	mock := &MockDBWriter{ctrl: ctrl}
	mock.recorder = &MockDBWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBWriter) EXPECT() *MockDBWriterMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockDBWriter) AddCategory(arg0 context.Context, arg1 *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", arg0, arg1)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockDBWriterMockRecorder) AddCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockDBWriter)(nil).AddCategory), arg0, arg1)
}

// AddPlayer mocks base method.
func (m *MockDBWriter) AddPlayer(arg0 context.Context, arg1 *entity.Player) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockDBWriterMockRecorder) AddPlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockDBWriter)(nil).AddPlayer), arg0, arg1)
}

// AddTenant mocks base method.
func (m *MockDBWriter) AddTenant(arg0 context.Context, arg1 *entity.Tenant) (*entity.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTenant", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTenant indicates an expected call of AddTenant.
func (mr *MockDBWriterMockRecorder) AddTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTenant", reflect.TypeOf((*MockDBWriter)(nil).AddTenant), arg0, arg1)
}

// AddTournament mocks base method.
func (m *MockDBWriter) AddTournament(arg0 context.Context, arg1 *entity.Tournament) (*entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTournament", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTournament indicates an expected call of AddTournament.
func (mr *MockDBWriterMockRecorder) AddTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTournament", reflect.TypeOf((*MockDBWriter)(nil).AddTournament), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockDBWriter) DeleteCategory(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockDBWriterMockRecorder) DeleteCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockDBWriter)(nil).DeleteCategory), arg0, arg1)
}

// DeletePlayer mocks base method.
func (m *MockDBWriter) DeletePlayer(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockDBWriterMockRecorder) DeletePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockDBWriter)(nil).DeletePlayer), arg0, arg1)
}

// DeleteTenant mocks base method.
func (m *MockDBWriter) DeleteTenant(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTenant indicates an expected call of DeleteTenant.
func (mr *MockDBWriterMockRecorder) DeleteTenant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenant", reflect.TypeOf((*MockDBWriter)(nil).DeleteTenant), arg0, arg1)
}

// DeleteTournament mocks base method.
func (m *MockDBWriter) DeleteTournament(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTournament", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTournament indicates an expected call of DeleteTournament.
func (mr *MockDBWriterMockRecorder) DeleteTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTournament", reflect.TypeOf((*MockDBWriter)(nil).DeleteTournament), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockDBWriter) UpdateCategory(arg0 context.Context, arg1 *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockDBWriterMockRecorder) UpdateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockDBWriter)(nil).UpdateCategory), arg0, arg1)
}

// UpdatePlayer mocks base method.
func (m *MockDBWriter) UpdatePlayer(arg0 context.Context, arg1 *entity.Player) (*entity.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", arg0, arg1)
	ret0, _ := ret[0].(*entity.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockDBWriterMockRecorder) UpdatePlayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockDBWriter)(nil).UpdatePlayer), arg0, arg1)
}

// UpdateTournament mocks base method.
func (m *MockDBWriter) UpdateTournament(arg0 context.Context, arg1 *entity.Tournament) (*entity.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTournament", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTournament indicates an expected call of UpdateTournament.
func (mr *MockDBWriterMockRecorder) UpdateTournament(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTournament", reflect.TypeOf((*MockDBWriter)(nil).UpdateTournament), arg0, arg1)
}
