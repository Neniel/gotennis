// Code generated by MockGen. DO NOT EDIT.
// Source: ./lib/app/app.go
//
// Generated by this command:
//
//	mockgen -source=./lib/app/app.go -destination=./lib/app/mock_app.go -package=app
//

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIApp is a mock of IApp interface.
type MockIApp struct {
	ctrl     *gomock.Controller
	recorder *MockIAppMockRecorder
}

// MockIAppMockRecorder is the mock recorder for MockIApp.
type MockIAppMockRecorder struct {
	mock *MockIApp
}

// NewMockIApp creates a new mock instance.
func NewMockIApp(ctrl *gomock.Controller) *MockIApp {
	mock := &MockIApp{ctrl: ctrl}
	mock.recorder = &MockIAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApp) EXPECT() *MockIAppMockRecorder {
	return m.recorder
}

// GetMongoDBClients mocks base method.
func (m *MockIApp) GetMongoDBClients() map[string]*TenantMongoDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDBClients")
	ret0, _ := ret[0].(map[string]*TenantMongoDB)
	return ret0
}

// GetMongoDBClients indicates an expected call of GetMongoDBClients.
func (mr *MockIAppMockRecorder) GetMongoDBClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDBClients", reflect.TypeOf((*MockIApp)(nil).GetMongoDBClients))
}

// GetSystemMongoDBClient mocks base method.
func (m *MockIApp) GetSystemMongoDBClient() *SystemMongoDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemMongoDBClient")
	ret0, _ := ret[0].(*SystemMongoDB)
	return ret0
}

// GetSystemMongoDBClient indicates an expected call of GetSystemMongoDBClient.
func (mr *MockIAppMockRecorder) GetSystemMongoDBClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemMongoDBClient", reflect.TypeOf((*MockIApp)(nil).GetSystemMongoDBClient))
}
